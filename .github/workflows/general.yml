name: Rust

on: [ push ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.6.2
  SQLX_FEATURES: "rustls,postgres"
  DATABASE_URL: postgres://postgres:password@localhost:5432/newsletter


jobs:

  lint:
    name: RustFmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: setup rust env
        uses: ./.github/actions/setup
        with:
          cache-key: "-RustFmt"
      - name: Check
        run: cargo fmt --check

  audit:
    needs: [ lint ]
    strategy:
      matrix:
        include:
          - name: Test
            cargo_cmd: test
          - name: Clippy
            components: clippy
            cargo_cmd: clippy -- -D warnings
          - name: Code coverage
            cargo_cmd: install cargo-tarpaulin || true && cargo tarpaulin --verbose -o Stdout

    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: setup rust env
        uses: ./.github/actions/setup
        with:
          cache-key: "-${{ matrix.name }}-${{ env.SQLX_VERSION }}"
          components: ${{ matrix.components }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked || true
      # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available.
      # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published.
      # It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems
      - name: Install postgresql-client
        run: sudo apt-get update && sudo apt-get install postgresql-client -y
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - if: ${{ matrix.name == 'Code coverage' }}
        run: echo "RUST_LOG=info" >> $GITHUB_ENV
      - name: Check
        run: cargo ${{ matrix.cargo_cmd }} >> $GITHUB_STEP_SUMMARY